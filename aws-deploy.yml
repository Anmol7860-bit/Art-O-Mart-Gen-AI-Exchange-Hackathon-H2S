name: Deploy Art-O-Mart Frontend to AWS S3 + CloudFront

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up environment variables
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_ENABLE_AI_FEATURES: ${{ secrets.VITE_ENABLE_AI_FEATURES || 'true' }}
          VITE_ENABLE_WEBSOCKETS: ${{ secrets.VITE_ENABLE_WEBSOCKETS || 'true' }}
          VITE_ENABLE_ANALYTICS: ${{ secrets.VITE_ENABLE_ANALYTICS || 'true' }}
          VITE_DEBUG_MODE: 'false'
          VITE_MOCK_DATA: 'false'
        run: |
          echo "Environment variables configured for production build"

      - name: Run tests
        run: |
          npm run test:unit || echo "No unit tests configured yet"

      - name: Build application
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_ENABLE_AI_FEATURES: ${{ secrets.VITE_ENABLE_AI_FEATURES || 'true' }}
          VITE_ENABLE_WEBSOCKETS: ${{ secrets.VITE_ENABLE_WEBSOCKETS || 'true' }}
          VITE_ENABLE_ANALYTICS: ${{ secrets.VITE_ENABLE_ANALYTICS || 'true' }}
          VITE_DEBUG_MODE: 'false'
          VITE_MOCK_DATA: 'false'
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        env:
          S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          # Sync files to S3
          aws s3 sync dist/ s3://$S3_BUCKET --delete --exact-timestamps
          
          # Set proper content types and cache headers
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.html" --cache-control "no-cache, no-store, must-revalidate"
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.js" --cache-control "public, max-age=31536000, immutable"
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.css" --cache-control "public, max-age=31536000, immutable"
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.png" --cache-control "public, max-age=31536000, immutable"
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.jpg" --cache-control "public, max-age=31536000, immutable"
          aws s3 cp dist/ s3://$S3_BUCKET/ --recursive --exclude "*" --include "*.svg" --cache-control "public, max-age=31536000, immutable"

      - name: Invalidate CloudFront
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

      - name: Run post-deployment validation
        env:
          DEPLOYMENT_URL: ${{ secrets.DEPLOYMENT_URL }}
        run: |
          # Wait for deployment to be available
          sleep 30
          
          # Basic health check
          curl -f $DEPLOYMENT_URL || exit 1
          
          # Check if main assets are accessible
          curl -f $DEPLOYMENT_URL/assets/ || echo "Assets directory check failed"

  # Optional: Run E2E tests against deployed application
  e2e-tests:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run E2E tests
        env:
          BASE_URL: ${{ secrets.DEPLOYMENT_URL }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        run: |
          npm run test:e2e -- --base-url=$BASE_URL

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7